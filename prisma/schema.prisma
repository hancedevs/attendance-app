datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  MANAGEMENT
  MARKETING
  DEVELOPMENT
	SALES
	RND
}

enum AttendType {
  IN
  OUT
  PAUSE
  RESUME
}

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())

  name  String @db.VarChar(40)
  email String @unique

  username String @unique
  password String

  role UserRole

  Attendance   Attendance[]
  StaffRequest StaffRequest[]
  Message Message[]
  Admin Admin[]
  Feedback Feedback[]
  Schedule Schedule[]
  PasswordReset PasswordReset[]
}

model Attachment {
  id Int @id @default(autoincrement())

  name     String
  filename String

  text String?

  Attendance Attendance[]
  StaffRequest StaffRequest[]
  Feedback Feedback[]
}

model Attendance {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  date   DateTime   @default(now())
  status AttendType

  attachment   Attachment? @relation(fields: [attachmentId], references: [id])
  attachmentId Int?
}

enum StaffRequestStatus {
  APPROVED
  PENDING
  REJECTED
  CONSULTATION_REQUIRED
}

model StaffRequest {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  title   String? @db.VarChar(40)
  content String?

  status StaffRequestStatus @default(PENDING)

  attachment   Attachment? @relation(fields: [attachmentId], references: [id])
  attachmentId Int?
}

model Admin {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

enum ConversationType {
  PRIVATE
  GROUP
}

model Conversation {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())

  members Int[]
  type ConversationType

  Message Message[]
  Group Group[]
}

model Group {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())

  name String
  role UserRole?
  
  conversation Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
}

model MessageAttachment {
  id Int @id @default(autoincrement())

  filename String

  message Message @relation(fields: [messageId], references: [id])
  messageId Int
}

model Message {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  
  user   User @relation(fields: [userId], references: [id])
  userId Int

  content String

  attachments MessageAttachment[]
}

model Industry {
  id Int @id @default(autoincrement())
  
  name String
  description String

  Company Company[]
}

model Company {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())

  name String @db.VarChar(45)

  phoneNo String 
  address String @db.VarChar(45)
  email   String 

  industry Industry @relation(fields: [industryId], references: [id])
  industryId Int

  Feedback Feedback[]
}

enum FeedbackStatus {
  ACCEPTED
  ALMOST_ACCEPTED
  UNDECIDED
  ALMOST_REJECTED
  REJECTED
}


model Feedback {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId Int
  
  text String

  attachment   Attachment? @relation(fields: [attachmentId], references: [id])
  attachmentId Int?

  // Company
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?

  status FeedbackStatus
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Schedule {
  id Int @id @default(autoincrement())

  day Day

  startTime  DateTime
  endTime    DateTime

  user   User @relation(fields: [userId], references: [id])
  userId Int

  uniform Boolean @default(false)
}

model IPAddress {
  id Int @id @default(autoincrement())

  address String
  name String
  
  enabled Boolean @default(false)
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  key       String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId, key])
}
